#!/usr/bin/env python
import argparse, os, sys



def main(argv):
    parser = argparse.ArgumentParser(
        conflict_handler='resolve',allow_abbrev=False,
        usage='glink [options] {<files.o>} -l<lib> -o <outfile.gt1>',
        description='Collects gigatron .{s,o,a} files into a .gt1 file.',
        epilog='''This program accepts the modules generated by gigatron-lcc/rcc
        (suffix .s or .o). These files are text files with a python
        syntax. They contain a single function that defines all the
        VCPU instructions, labels and data for this
        module. Handcrafted modules can test the cpu, rom, and map
        options to include different codes. Glink also accepts
        concatenation of such files forming a library (suffix .a). The
        output file includes the module that exports the entry point
        symbol, then the modules that exports all the symbols that it
        imports, then recursively all the modules that are needed to
        resolve imported symbols.''')
    parser.add_argument('-o', type=str, default='a.gt1', metavar='file.gt1',
                        help='select the output filename (default: a.gt1)')
    parser.add_argument('-cpu', type=str, action='store',
                        help='select the target cpu version')
    parser.add_argument('-rom', type=str, action='store',
                        help='select the target rom version')
    parser.add_argument('-map', type=str, action='store',
                        help='select the memory model')
    parser.add_argument('-d', action='store_true',
                        help='enable debug output')
    parser.add_argument('-e', type=str, action='store', default='_start',
                        help='select the entry point symbol (default _start)')
    parser.add_argument('files', type=str, nargs='+',
                        help='input files')
    parser.add_argument('-l', type=str, action='append',
                        help='library files. -lxxx searches for libxxx.a')
    args = parser.parse_args(argv)

    print(args)
    
    print("glink does not work yet")
    
if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
    
# Local Variables:
# mode: python
# indent-tabs-mode: ()
# End:
